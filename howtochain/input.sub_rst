推論器の学習
====================

推論器は学習後、最終的に目的の関数を近似したものになります。

関数には入力に対応した出力がありますが、学習時に入力とともに出力を与える学習を教師付き学習と言います。このドキュメントではこの教師付き学習を扱っていきます。

ここではまず入力に対応する出力のある何らかの関数を考えてそれを推論器に学習させてみましょう。ここで言う関数は例えば :math:`f(x)=2x` がそれにあたります。

ライブラリの使用
------------------------

添付ファイルの :samp:`code.zip` の :samp:`simple_model` ディレクトリ（フォルダのこと）に学習を試すためのソースコードを用意しておきました。

まずは :samp:`simple_model` というフォルダに :samp:`runner.py` というファイルを作ってみましょう。

:samp:`python` は他の言語と同じように初めは最低限の機能しか使うことが出来ません。

そのため、まずは機能を追加するためのソースコードを :samp:`runner.py` に加えましょう。

.. code-block:: python

    import simple
    import numpy
    from random import random

:command:`import` で指定した :samp:`ライブラリや現在のディレクトリのpythonファイルやディレクトリ` の機能を使えるようになります。

こうして :command:`import` したものは以下のように :samp:`\{ライブラリ名\}.\{呼び出したい関数など\}` と書くことで呼び出せます。

.. code-block:: python
    
    import simple
    import numpy
    from random import random

    simple.hello("Mike")

また :command:`from ~ import ~` ではライブラリを追加したあと、ライブラリ名を省略して呼び出すことが可能になります。

.. raw:: latex

    \clearpage

.. code-block:: python
    
    import simple
    import numpy
    from random import random

    #simple.hello("Mike")
    """
    random.random() と書かなくても呼び出すことが出来る
    """
    simple.hello(random()) # random() は乱数を返す関数


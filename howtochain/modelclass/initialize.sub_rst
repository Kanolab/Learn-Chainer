推論器の層の定義
-----------------------------

ここからは推論器を構成するPythonのclass（以下では単にクラスと呼びます）を定義していきます。

まずは推論機のためのディレクトリを作っておきましょう。ここではoriginalディレクトリとします。

では早速、推論器そのもののクラスを定義しましょう。今は詳しくは説明しませんが、ここではニューラルネットワークで使う層というものを定義していきます。

そのためにまずクラスを定義するためのファイルmodel.pyを作っておきます。

main関数の定義は :samp:`def` キーワードを使って定義していました。

.. code-block:: python

    def main():
        ...

クラスの定義は :samp:`class` キーワードを使って定義します。

.. code-block:: python

    class OriginalPredictor():
        
このままではChainerの機能を使えないので、まずはChainerをインポートします。

次にOriginalPredictorクラスがChainerのクラスchainer.Chainを継承するようにします。

.. code-block:: python

    import chainer

    class OriginalPredictor(chainer.Chain):

次にクラスの中にニューラルネットワークを使うための初期化処理をする関数initialize()を書いていきます。

.. code-block:: python

    import chainer

    class OriginalPredictor(chainer.Chain):
        def initialize(self): # selfは生成したOriginalPredictorの実体を表す。

まずは継承したクラスchainer.Chainの機能を使った初期化をします。

.. code-block:: python

    import chainer

    class OriginalPredictor(chainer.Chain):
        def initialize(self): # selfは生成したOriginalPredictorの実体を表す。
            super(OriginalPredictor, self).__init__() # superでchainer.Chainの実体を作って、__init__()関数で初期化

さらにニューラルネットワークで使う層を定義していきます。ここではすべて全結合層という層で定義します。

全結合層を使うときにいちいちchainer.links.Linear()などと打つ必要があります。しかしいちいち打つのは面倒です。

それを省略して使うために以下の定義をimport chainerの次に追加しておきましょう。

.. code-block:: python

    import chainer.links as L

全結合層の定義では入力の個数と出力の個数を引数に取りますが、入力の個数はChainerが推測して当てはめてくれます。

そのため入力の個数にはNoneという何もないという意味の値を入れます。出力の個数は適当に決めておきます。

.. raw:: latex

    \clearpage

.. code-block:: python

    import chainer

    class OriginalPredictor(chainer.Chain):
        def initialize(self): # selfは生成したOriginalPredictorの実体を表す。
            """
            super()で継承したchainer.Chainの実体を作り、
            __init__()関数で初期化
            """
            super(OriginalPredictor, self).__init__()
            with self.init_scope():
            self.l1 = L.Linear(None, 100)
            self.l2 = L.Linear(None, 100)
            self.l3 = L.Linear(None, 1)
